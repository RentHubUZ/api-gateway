// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/api/payment/createpayment": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Create a new payment with specified details",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "payments"
                ],
                "summary": "Create a new payment",
                "parameters": [
                    {
                        "description": "Create Payment Request",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/payment.CreatePaymentReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/payment.CreatePaymentRes"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/payment/deletepayment/{payment_id}": {
            "delete": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Delete a payment by payment ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "payments"
                ],
                "summary": "Delete payment",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Payment ID",
                        "name": "payment_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/payment.DeletePaymentRes"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/payment/getallpayment/{limit}/{page}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Retrieve a list of all payments with pagination",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "payments"
                ],
                "summary": "Get all payments",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Limit",
                        "name": "limit",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Page",
                        "name": "page",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/payment.GetAllPaymentRes"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/payment/getbyidpayment/{payment_id}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Retrieve payment details by payment ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "payments"
                ],
                "summary": "Get payment by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Payment ID",
                        "name": "payment_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/payment.GetPaymentRes"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/properties/propertiescreate": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Create a new house with specified properties",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "houses"
                ],
                "summary": "Create a new house",
                "parameters": [
                    {
                        "description": "Create House Request",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.CreateProperties"
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "description": "Accepted",
                        "schema": {
                            "$ref": "#/definitions/accommodation.CreateHouseRes"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/properties/propertiesdelete/{properties_id}": {
            "delete": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Delete a house by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "houses"
                ],
                "summary": "Delete a house",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Property ID",
                        "name": "properties_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "202": {
                        "description": "Accepted",
                        "schema": {
                            "$ref": "#/definitions/accommodation.DeleteHouseRes"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/properties/propertiesgetall/{limit}/{page}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Retrieve a list of all houses with pagination",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "houses"
                ],
                "summary": "Get all houses",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Limit",
                        "name": "limit",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Page",
                        "name": "page",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "202": {
                        "description": "Accepted",
                        "schema": {
                            "$ref": "#/definitions/accommodation.GetAllHouseRes"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/properties/propertiesgetbyid/{properties_id}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Retrieve house information by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "houses"
                ],
                "summary": "Get house by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Property ID",
                        "name": "properties_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "202": {
                        "description": "Accepted",
                        "schema": {
                            "$ref": "#/definitions/accommodation.GetByIdHouseRes"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/properties/propertiesupdate": {
            "put": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Update an existing house with new details",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "houses"
                ],
                "summary": "Update an existing house",
                "parameters": [
                    {
                        "description": "Update House Request",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.UpdateProperties"
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "description": "Accepted",
                        "schema": {
                            "$ref": "#/definitions/accommodation.UpdateHouseRes"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/tarif/createtarif": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Create a new tariff with specified details",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "tariffs"
                ],
                "summary": "Create a new tariff",
                "parameters": [
                    {
                        "description": "Create Tariff Request",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/tariff.CreateTariffReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/tariff.CreateTariffRes"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/tarif/deletetarif/{tarif_id}": {
            "delete": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Delete a tariff by tariff ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "tariffs"
                ],
                "summary": "Delete tariff",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Tariff ID",
                        "name": "tarif_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/tariff.DeleteTariffRes"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/tarif/getalltarif/{limit}/{page}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Retrieve a list of all tariffs with pagination",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "tariffs"
                ],
                "summary": "Get all tariffs",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Limit",
                        "name": "limit",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Page",
                        "name": "page",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/tariff.GetAllTariffRes"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/tarif/getbyidtarif/{tarif_id}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Retrieve tariff details by tariff ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "tariffs"
                ],
                "summary": "Get tariff by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Tariff ID",
                        "name": "tarif_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/tariff.GetTariffRes"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/tarif/updatetarif": {
            "put": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Update an existing tariff with specified details",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "tariffs"
                ],
                "summary": "Update a tariff",
                "parameters": [
                    {
                        "description": "Update Tariff Request",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/tariff.UpdateTariffReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/tariff.UpdateTariffRes"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/topproperties/createtopproperties": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Create a new top property with specified details",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "top_properties"
                ],
                "summary": "Create top properties",
                "parameters": [
                    {
                        "description": "Top Properties",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Top_Properties"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/top_properties.CreateTopPropertyRes"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/topproperties/deletetopproperties/{top_properties_id}": {
            "delete": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Delete a top property by its ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "top_properties"
                ],
                "summary": "Delete top properties",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Top Properties ID",
                        "name": "top_properties_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/top_properties.DeleteTopPropertyRes"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/topproperties/getalltopproperties/{limit}/{page}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Retrieve a list of all top properties with pagination",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "top_properties"
                ],
                "summary": "Get all top properties",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Limit",
                        "name": "limit",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Page",
                        "name": "page",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/top_properties.GetAllTopPropertyRes"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/topproperties/getbyidtopproperties/{top_properties_id}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Retrieve top properties details by its ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "top_properties"
                ],
                "summary": "Get top properties by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Top Properties ID",
                        "name": "top_properties_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/top_properties.GetTopPropertyRes"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/topproperties/updatetopproperties": {
            "put": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Update an existing top property by its ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "top_properties"
                ],
                "summary": "Update top properties",
                "parameters": [
                    {
                        "description": "Update Top Properties",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Top_UpdateProperties"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/top_properties.UpdateTopPropertyRes"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/review/create": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Create a new review with specified details",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "reviews"
                ],
                "summary": "Create a new review",
                "parameters": [
                    {
                        "description": "Create Review Request",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/reviews.CreateReviewReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/reviews.CreateReviewRes"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/review/delete/{id}": {
            "delete": {
                "description": "Delete a review by its ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "reviews"
                ],
                "summary": "Delete a review",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Review ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/reviews.DeleteReviewRes"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/review/getallreview": {
            "get": {
                "description": "Get a paginated list of all reviews",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "reviews"
                ],
                "summary": "Get all reviews",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Limit",
                        "name": "limit",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Page",
                        "name": "page",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/reviews.GetAllReviewRes"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/review/getbyid/{id}": {
            "get": {
                "description": "Get the details of a specific review by its ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "reviews"
                ],
                "summary": "Get a review by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Review ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/reviews.GetByIdReviewRes"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/review/update/{id}": {
            "put": {
                "description": "Update the details of a review by its ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "reviews"
                ],
                "summary": "Update an existing review",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Review ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Update Review Request",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/reviews.CreateReviewReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/reviews.CreateReviewRes"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "accommodation.CreateHouseRes": {
            "type": "object",
            "properties": {
                "address": {
                    "type": "string"
                },
                "bathrooms": {
                    "type": "integer"
                },
                "bedrooms": {
                    "type": "integer"
                },
                "created_at": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "image_url": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "latitude": {
                    "type": "number"
                },
                "lease_duration": {
                    "type": "integer"
                },
                "lease_terms": {
                    "type": "string"
                },
                "listing_status": {
                    "type": "string"
                },
                "longitude": {
                    "type": "number"
                },
                "owner_id": {
                    "type": "string"
                },
                "price": {
                    "type": "number"
                },
                "property_type": {
                    "type": "string"
                },
                "roommate_count": {
                    "type": "integer"
                },
                "square_footage": {
                    "type": "number"
                },
                "top_status": {
                    "type": "boolean"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "accommodation.DeleteHouseRes": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                }
            }
        },
        "accommodation.GetAllHouseRes": {
            "type": "object",
            "properties": {
                "house": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/accommodation.GetAllHouses"
                    }
                }
            }
        },
        "accommodation.GetAllHouses": {
            "type": "object",
            "properties": {
                "address": {
                    "type": "string"
                },
                "bathrooms": {
                    "type": "integer"
                },
                "bedrooms": {
                    "type": "integer"
                },
                "created_at": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "image_url": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "latitude": {
                    "type": "number"
                },
                "lease_duration": {
                    "type": "integer"
                },
                "lease_terms": {
                    "type": "string"
                },
                "listing_status": {
                    "type": "string"
                },
                "longitude": {
                    "type": "number"
                },
                "owner_id": {
                    "type": "string"
                },
                "price": {
                    "type": "number"
                },
                "property_type": {
                    "type": "string"
                },
                "roommate_count": {
                    "type": "integer"
                },
                "square_footage": {
                    "type": "number"
                },
                "top_status": {
                    "type": "boolean"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "accommodation.GetByIdHouseRes": {
            "type": "object",
            "properties": {
                "address": {
                    "type": "string"
                },
                "bathrooms": {
                    "type": "integer"
                },
                "bedrooms": {
                    "type": "integer"
                },
                "created_at": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "image_url": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "latitude": {
                    "type": "number"
                },
                "lease_duration": {
                    "type": "integer"
                },
                "lease_terms": {
                    "type": "string"
                },
                "listing_status": {
                    "type": "string"
                },
                "longitude": {
                    "type": "number"
                },
                "owner_id": {
                    "type": "string"
                },
                "price": {
                    "type": "number"
                },
                "property_type": {
                    "type": "string"
                },
                "roommate_count": {
                    "type": "integer"
                },
                "square_footage": {
                    "type": "number"
                },
                "top_status": {
                    "type": "boolean"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "accommodation.UpdateHouseRes": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                }
            }
        },
        "models.CreateProperties": {
            "type": "object",
            "properties": {
                "address": {
                    "type": "string"
                },
                "bathrooms": {
                    "type": "integer"
                },
                "bedrooms": {
                    "type": "integer"
                },
                "description": {
                    "type": "string"
                },
                "image_url": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "latitude": {
                    "type": "number"
                },
                "lease_duration": {
                    "type": "integer"
                },
                "lease_terms": {
                    "type": "string"
                },
                "listing_status": {
                    "type": "string"
                },
                "longitude": {
                    "type": "number"
                },
                "price": {
                    "type": "number"
                },
                "property_type": {
                    "type": "string"
                },
                "roommate_count": {
                    "type": "integer"
                },
                "square_footage": {
                    "type": "number"
                },
                "top_status": {
                    "type": "boolean"
                }
            }
        },
        "models.Top_Properties": {
            "type": "object",
            "properties": {
                "property_id": {
                    "type": "string"
                },
                "tariff_name": {
                    "type": "string"
                }
            }
        },
        "models.Top_UpdateProperties": {
            "type": "object",
            "properties": {
                "end_date": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "property_id": {
                    "type": "string"
                },
                "start_date": {
                    "type": "string"
                },
                "tariff_name": {
                    "type": "string"
                }
            }
        },
        "models.UpdateProperties": {
            "type": "object",
            "properties": {
                "address": {
                    "type": "string"
                },
                "bathrooms": {
                    "type": "integer"
                },
                "bedrooms": {
                    "type": "integer"
                },
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "image_url": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "latitude": {
                    "type": "number"
                },
                "lease_duration": {
                    "type": "integer"
                },
                "lease_terms": {
                    "type": "string"
                },
                "listing_status": {
                    "type": "string"
                },
                "longitude": {
                    "type": "number"
                },
                "price": {
                    "type": "number"
                },
                "property_type": {
                    "type": "string"
                },
                "roommate_count": {
                    "type": "integer"
                },
                "square_footage": {
                    "type": "number"
                },
                "top_status": {
                    "type": "boolean"
                }
            }
        },
        "payment.CreatePaymentReq": {
            "type": "object",
            "properties": {
                "amount": {
                    "description": "Decimal as a string to avoid precision loss",
                    "type": "string"
                },
                "status": {
                    "description": "'pending', 'completed', etc.",
                    "type": "string"
                },
                "transaction_date": {
                    "description": "Optional",
                    "type": "string"
                }
            }
        },
        "payment.CreatePaymentRes": {
            "type": "object",
            "properties": {
                "id": {
                    "description": "Payment ID",
                    "type": "string"
                }
            }
        },
        "payment.DeletePaymentRes": {
            "type": "object",
            "properties": {
                "success": {
                    "type": "boolean"
                }
            }
        },
        "payment.GetAllPaymentRes": {
            "type": "object",
            "properties": {
                "payments": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/payment.Payment"
                    }
                }
            }
        },
        "payment.GetPaymentRes": {
            "type": "object",
            "properties": {
                "payment": {
                    "$ref": "#/definitions/payment.Payment"
                }
            }
        },
        "payment.Payment": {
            "type": "object",
            "properties": {
                "amount": {
                    "description": "Decimal as a string",
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "status": {
                    "description": "'pending', 'completed', etc.",
                    "type": "string"
                },
                "transaction_date": {
                    "type": "string"
                }
            }
        },
        "reviews.CreateReviewReq": {
            "type": "object",
            "properties": {
                "comment": {
                    "type": "string"
                },
                "property_id": {
                    "type": "string"
                },
                "rating": {
                    "type": "integer"
                },
                "user_id": {
                    "type": "string"
                }
            }
        },
        "reviews.CreateReviewRes": {
            "type": "object",
            "properties": {
                "comment": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "property_id": {
                    "type": "string"
                },
                "rating": {
                    "type": "integer"
                },
                "updated_at": {
                    "type": "string"
                },
                "user_id": {
                    "type": "string"
                }
            }
        },
        "reviews.DeleteReviewRes": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                }
            }
        },
        "reviews.GetAllReviewRes": {
            "type": "object",
            "properties": {
                "review": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/reviews.Review"
                    }
                }
            }
        },
        "reviews.GetByIdReviewRes": {
            "type": "object",
            "properties": {
                "comment": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "property_id": {
                    "type": "string"
                },
                "rating": {
                    "type": "integer"
                },
                "updated_at": {
                    "type": "string"
                },
                "user_id": {
                    "type": "string"
                }
            }
        },
        "reviews.Review": {
            "type": "object",
            "properties": {
                "comment": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "property_id": {
                    "type": "string"
                },
                "rating": {
                    "type": "integer"
                },
                "updated_at": {
                    "type": "string"
                },
                "user_id": {
                    "type": "string"
                }
            }
        },
        "tariff.CreateTariffReq": {
            "type": "object",
            "properties": {
                "days": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "offers": {
                    "type": "string"
                },
                "price": {
                    "type": "number"
                }
            }
        },
        "tariff.CreateTariffRes": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                }
            }
        },
        "tariff.DeleteTariffRes": {
            "type": "object",
            "properties": {
                "success": {
                    "type": "boolean"
                }
            }
        },
        "tariff.GetAllTariffRes": {
            "type": "object",
            "properties": {
                "tariffs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/tariff.Tariff"
                    }
                }
            }
        },
        "tariff.GetTariffRes": {
            "type": "object",
            "properties": {
                "tariff": {
                    "$ref": "#/definitions/tariff.Tariff"
                }
            }
        },
        "tariff.Tariff": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "days": {
                    "type": "integer"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "offers": {
                    "type": "string"
                },
                "price": {
                    "type": "number"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "tariff.UpdateTariffReq": {
            "type": "object",
            "properties": {
                "days": {
                    "type": "integer"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "offers": {
                    "type": "string"
                },
                "price": {
                    "type": "number"
                }
            }
        },
        "tariff.UpdateTariffRes": {
            "type": "object",
            "properties": {
                "success": {
                    "type": "boolean"
                }
            }
        },
        "top_properties.CreateTopPropertyRes": {
            "type": "object",
            "properties": {
                "id": {
                    "description": "Top property ID",
                    "type": "string"
                }
            }
        },
        "top_properties.DeleteTopPropertyRes": {
            "type": "object",
            "properties": {
                "success": {
                    "type": "boolean"
                }
            }
        },
        "top_properties.GetAllTopPropertyRes": {
            "type": "object",
            "properties": {
                "top_properties": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/top_properties.TopProperty"
                    }
                }
            }
        },
        "top_properties.GetTopPropertyRes": {
            "type": "object",
            "properties": {
                "top_property": {
                    "$ref": "#/definitions/top_properties.TopProperty"
                }
            }
        },
        "top_properties.TopProperty": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "end_date": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "property_id": {
                    "type": "string"
                },
                "start_date": {
                    "type": "string"
                },
                "tariff_name": {
                    "type": "string"
                },
                "user_id": {
                    "type": "string"
                }
            }
        },
        "top_properties.UpdateTopPropertyRes": {
            "type": "object",
            "properties": {
                "success": {
                    "type": "boolean"
                }
            }
        }
    },
    "securityDefinitions": {
        "ApiKeyAuth": {
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "Api Gateway",
	Description:      "This is a sample server for Api-gateway Service",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
